name: Run tests
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'apple/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'apple/**'

env:
  NEXT_PUBLIC_APP_ENV: prod
  NEXT_PUBLIC_BASE_URL: http://localhost:3000
  NEXT_PUBLIC_SERVER_BASE_URL: http://localhost:4000
  NEXT_PUBLIC_HIGHLIGHTS_BASE_URL: http://localhost:3000

jobs:
  run-code-tests:
    name: Run Codebase tests
    runs-on: ${{ github.repository_owner == 'omnivore-app' && 'ubuntu-latest-m' || 'ubuntu-latest' }}
    services:
      postgres:
        image: ankane/pgvector
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6379
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Initialize the database
        run: |
          cp ./packages/api/.env.test ./packages/api/.env
          psql --host localhost --port ${{ job.services.postgres.ports[5432] }} --user postgres --password -c "CREATE DATABASE omnivore_test;"
        env:
          PGPASSWORD: postgres
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: 18.16
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(source ~/.nvm/nvm.sh && yarn cache dir)"
      - name: Install dependencies
        run: |
          source ~/.nvm/nvm.sh
          yarn install --frozen-lockfile
      - name: Database Migration
        run: |
          psql -h localhost -p ${{ job.services.postgres.ports[5432] }} -U postgres -c "CREATE USER app_user WITH ENCRYPTED PASSWORD 'app_pass';"
          yarn workspace @omnivore/db migrate
          psql -h localhost -p ${{ job.services.postgres.ports[5432] }} -U postgres -c "GRANT omnivore_user to app_user;"
        env:
          PG_HOST: localhost
          PG_PORT: ${{ job.services.postgres.ports[5432] }}
          PG_USER: postgres
          PG_PASSWORD: postgres
          PG_DB: omnivore_test
          PGPASSWORD: postgres # This is required for the psql command to work without a password prompt
      - name: TypeScript Build and Lint
        run: |
          source ~/.nvm/nvm.sh
          yarn build
          yarn lint
      - name: Tests
        run: |
          source ~/.nvm/nvm.sh
          yarn test
        timeout-minutes: 10
        env:
          PG_HOST: localhost
          PG_PORT: ${{ job.services.postgres.ports[5432] }}
          PG_USER: app_user
          PG_PASSWORD: app_pass
          PG_DB: omnivore_test
          PG_LOGGER: debug
          REDIS_URL: redis://localhost:${{ job.services.redis.ports[6379] }}
  build-and-push-api-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the ghcr.io
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}-api

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./packages/api/Dockerfile
          push: true
          # TODO Support Realease Tag
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-and-push-db-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}-db

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./packages/db/Dockerfile
          push: true
          # TODO Support Realease Tag
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-and-push-content-fetch-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}-content-fetch

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./packages/content-fetch/Dockerfile
          push: true
          # TODO Support Realease Tag
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-and-push-web-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ghcr.io/${{ github.repository }}-web

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          file: ./packages/web/Dockerfile
          build-args: |
            APP_ENV=prod
            BASE_URL=http://localhost:3000
            SERVER_BASE_URL=http://localhost:4000
            HIGHLIGHTS_BASE_URL=http://localhost:3000
          push: true
          # TODO Support Realease Tag
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}